I"“
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.UiElement.permission = (function(superClass) {
    extend(permission, superClass);

    function permission() {
      return permission.__super__.constructor.apply(this, arguments);
    }

    permission.render = function(attribute, params) {
      var item, permissions;
      if (params == null) {
        params = {};
      }
      permissions = App.Permission.search({
        sortBy: 'name'
      });
      item = $(App.view('generic/permission')({
        attribute: attribute,
        params: params,
        permissions: permissions
      }));
      item.find('[name=permission_ids]').bind('change', function(e) {
        var checked, element, i, j, len, len1, localElement, localPermission, lookupPermission, permission, permission_id, ref, regexp, results;
        element = $(e.currentTarget);
        checked = element.prop('checked');
        permission_id = element.prop('value');
        if (!permission_id) {
          return;
        }
        permission = App.Permission.find(permission_id);
        if (!permission) {
          return;
        }
        if (!permission.name.match(/\./)) {
          for (i = 0, len = permissions.length; i < len; i++) {
            localPermission = permissions[i];
            regexp = new RegExp("^" + permission.name);
            if (localPermission.name.match(regexp)) {
              localElement = item.find("[name=permission_ids][value=" + localPermission.id + "]").closest('.js-subPermissionList');
              if (checked) {
                localElement.addClass('hide');
              } else {
                localElement.removeClass('hide');
              }
            }
          }
        }
        if (checked && permission.preferences.not) {
          ref = permission.preferences.not;
          results = [];
          for (j = 0, len1 = ref.length; j < len1; j++) {
            localPermission = ref[j];
            lookupPermission = App.Permission.findByAttribute('name', localPermission);
            if (lookupPermission) {
              results.push(item.find("[name=permission_ids][value=" + lookupPermission.id + "]").prop('checked', false));
            } else {
              results.push(void 0);
            }
          }
          return results;
        }
      });
      return item;
    };

    return permission;

  })(App.UiElement.ApplicationUiElement);

}).call(this);
:ET