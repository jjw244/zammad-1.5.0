I"(function() {
  var Index,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Index = (function(superClass) {
    extend(Index, superClass);

    Index.prototype.requiredPermission = 'user_preferences.linked_accounts';

    Index.prototype.header = 'Linked Accounts';

    Index.prototype.events = {
      'click .js-remove': 'remove'
    };

    function Index() {
      this.error = bind(this.error, this);
      this.success = bind(this.success, this);
      this.remove = bind(this.remove, this);
      this.render = bind(this.render, this);
      Index.__super__.constructor.apply(this, arguments);
      this.render();
    }

    Index.prototype.render = function() {
      var auth_provider_all, auth_providers, key, provider;
      auth_provider_all = {
        facebook: {
          url: '/auth/facebook',
          name: 'Facebook',
          config: 'auth_facebook'
        },
        twitter: {
          url: '/auth/twitter',
          name: 'Twitter',
          config: 'auth_twitter'
        },
        linkedin: {
          url: '/auth/linkedin',
          name: 'LinkedIn',
          config: 'auth_linkedin'
        },
        github: {
          url: '/auth/github',
          name: 'GitHub',
          config: 'auth_github'
        },
        gitlab: {
          url: '/auth/gitlab',
          name: 'GitLab',
          config: 'auth_gitlab'
        },
        google_oauth2: {
          url: '/auth/google_oauth2',
          name: 'Google',
          config: 'auth_google_oauth2'
        },
        oauth2: {
          url: '/auth/oauth2',
          name: 'OAuth2',
          config: 'auth_oauth2'
        }
      };
      auth_providers = {};
      for (key in auth_provider_all) {
        provider = auth_provider_all[key];
        if (this.Config.get(provider.config) === true || this.Config.get(provider.config) === 'true') {
          auth_providers[key] = provider;
        }
      }
      return this.html(App.view('profile/linked_accounts')({
        user: App.Session.get(),
        auth_providers: auth_providers
      }));
    };

    Index.prototype.remove = function(e) {
      var provider, uid;
      e.preventDefault();
      provider = $(e.target).data('provider');
      uid = $(e.target).data('uid');
      return this.ajax({
        id: 'account',
        type: 'DELETE',
        url: this.apiPath + "/users/account",
        data: JSON.stringify({
          provider: provider,
          uid: uid
        }),
        processData: true,
        success: this.success,
        error: this.error
      });
    };

    Index.prototype.success = function(data, status, xhr) {
      var update;
      this.notify({
        type: 'success',
        msg: App.i18n.translateContent('Successful!')
      });
      update = (function(_this) {
        return function() {
          return _this.render();
        };
      })(this);
      return App.User.full(this.Session.get('id'), update, true);
    };

    Index.prototype.error = function(xhr, status, error) {
      var data;
      this.render();
      data = JSON.parse(xhr.responseText);
      return this.notify({
        type: 'error',
        msg: App.i18n.translateContent(data.message)
      });
    };

    return Index;

  })(App.ControllerSubContent);

  App.Config.set('LinkedAccounts', {
    prio: 4000,
    name: 'Linked Accounts',
    parent: '#profile',
    target: '#profile/linked',
    controller: Index,
    permission: ['user_preferences.linked_accounts']
  }, 'NavBarProfile');

}).call(this);
:ET